const CombatManagerTest = require('../src/combat/CombatManager')
const Creature = require('../src/Creature')

describe('isCreatureFighting', function () {
    it('should return true when adding a creature', function () {
        const cm = new CombatManagerTest()
        const c1 = new Creature()
        const c2 = new Creature()
        expect(cm.isCreatureFighting(c1)).toBeFalsy()
        cm.startCombat(c1, c2)
        expect(cm.isCreatureFighting(c1)).toBeTruthy()
    })
    it('target should be in combat when targeted bu attacker', function () {
        const cm = new CombatManagerTest()
        const c1 = new Creature()
        const c2 = new Creature()
        expect(cm.isCreatureFighting(c2)).toBeFalsy()
        cm.startCombat(c1, c2)
        expect(cm.isCreatureFighting(c2)).toBeTruthy()
    })
    it('both creature should be not-fighting when combat is done', function () {
        const cm = new CombatManagerTest()
        const c1 = new Creature()
        const c2 = new Creature()
        cm.startCombat(c1, c2)
        expect(cm.isCreatureFighting(c1)).toBeTruthy()
        expect(cm.isCreatureFighting(c2)).toBeTruthy()
        cm.endCombat(c1, true)
        expect(cm.isCreatureFighting(c1)).toBeFalsy()
        expect(cm.isCreatureFighting(c2)).toBeFalsy()
    })
    it('c2 combat should not end when ending c1 combat unilaterally', function () {
        const cm = new CombatManagerTest()
        const c1 = new Creature()
        const c2 = new Creature()
        cm.startCombat(c1, c2)
        expect(cm.isCreatureFighting(c1)).toBeTruthy()
        expect(cm.isCreatureFighting(c2)).toBeTruthy()
        cm.endCombat(c1, false)
        expect(cm.isCreatureFighting(c1)).toBeFalsy()
        expect(cm.isCreatureFighting(c2)).toBeTruthy()
    })
})

describe('combat.length', function () {
    it('should register 2 combat when adding one fighter and one target', function () {
        const cm = new CombatManagerTest()
        expect(cm.combats.length).toBe(0)
        const c1 = new Creature()
        const c2 = new Creature()
        cm.startCombat(c1, c2)
        expect(cm.combats.length).toBe(2)
    })
    it('should remain 1 combat when adding one fighter and one target and ending combat unilaterally', function () {
        const cm = new CombatManagerTest()
        expect(cm.combats.length).toBe(0)
        const c1 = new Creature()
        const c2 = new Creature()
        cm.startCombat(c1, c2)
        expect(cm.combats.length).toBe(2)
        cm.endCombat(c1, false)
        expect(cm.combats.length).toBe(1)
    })
    it('should have 2 registered combat when cancelling and resuming combat', function () {
        const cm = new CombatManagerTest()
        const c1 = new Creature()
        const c2 = new Creature()
        cm.startCombat(c1, c2)
        cm.endCombat(c1, false)
        cm.startCombat(c1, c2)
        expect(cm.combats.length).toBe(2)
    })
})